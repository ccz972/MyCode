//{
	// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
//}

{
	"atc-model": {
		"prefix": "haxi",
		"body": [
			"using ull = unsigned long long ;",
      "using HH = pair<ull, ull>;",
      "",
      "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
      "",
      "constexpr HH mod = {1000000009, 1000000007};",
      "",
      "HH operator*(const HH &a, const HH &b) {",
      "  return {(a.first * b.first) % mod.first, (a.second * b.second) % mod.second};",
      "}",
      "",
      "HH operator+(const HH &a, const HH &b) {",
      "  return {(a.first + b.first) % mod.first, (a.second + b.second) % mod.second};",
      "}",
      "",
      "HH operator-(const HH &a, const HH &b) {",
      "  return {(a.first - b.first + mod.first) %  mod.first, (a.second - b.second + mod.second) % mod.second};",
      "}",
      "",
      "HH operator*(const HH &a, const ull &b) {",
      "  return {(a.first * b) % mod.first, (a.second * b) % mod.second};",
      "}",
      "//HH base = {rng() % mod.first, rng() % mod.second};",
		],
		"description": "init haxi model"
	},
}