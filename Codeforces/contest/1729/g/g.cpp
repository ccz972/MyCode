/* Generated by powerful Codeforces Tool
 * Author: nanfeng1997
 * Time: 2022-09-12 22:36:26
**/

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#ifdef LOCAL
#include <debugger>
#else
#define debug(...) 42
#endif

template <typename T> void chkmax(T &x, T y) { x = max(x, y); }
template <typename T> void chkmin(T &x, T y) { x = min(x, y); }

const int MOD = 1000000007;

inline int mod(int x) {return x >= MOD ? x - MOD : x;}

inline int ksm(int a, int b) {
  int ret = 1; a = mod(a);
  for(; b; b >>= 1, a = 1LL * a * a % MOD) if(b & 1) ret = 1LL * ret * a % MOD;
  return ret;
}

template<int MOD> 
struct modint {
  int x;
  modint() {x = 0; }
  modint(int y) {x = y;}
  inline modint inv() const { return modint{ksm(x, MOD - 2)}; }
  explicit inline operator int() { return x; }
  friend inline modint operator + (const modint &a, const modint& b) { return modint(mod(a.x + b.x)); }
  friend inline modint operator - (const modint &a, const modint& b) { return modint(mod(a.x - b.x + MOD)); }
  friend inline modint operator * (const modint &a, const modint& b) { return modint(1ll * a.x * b.x % MOD); }
  friend inline modint operator / (const modint &a, const modint& b) { return modint(1ll * a.x * b.inv().x % MOD); }
  friend inline modint operator + (const modint &a, const int& b) { return modint(mod(a.x + b)); }
  friend inline modint operator - (const modint &a, const int& b) { return modint(mod(a.x - b + MOD)); }
  friend inline modint operator * (const modint &a, const int& b) { return modint(1ll * a.x * b % MOD); }
  friend inline modint operator / (const modint &a, const int& b) { return modint(1ll * a.x * ksm(b, MOD - 2) % MOD); } 
  friend inline modint operator - (const modint &a) { return modint(mod(MOD - a.x)); }
  friend inline modint& operator += (modint &a, const modint& b) { return a = a + b; }
  friend inline modint& operator -= (modint &a, const modint& b) { return a = a - b; }
  friend inline modint& operator *= (modint &a, const modint& b) { return a = a * b; }
  friend inline modint& operator /= (modint &a, const modint& b) { return a = a / b; }
  friend inline modint& operator += (modint &a, const int& b) { return a = a + b; }
  friend inline modint& operator -= (modint &a, const int& b) { return a = a - b; }
  friend inline modint& operator *= (modint &a, const int& b) { return a = a * b; }
  friend inline modint& operator /= (modint &a, const int& b) { return a = a / b; }
  friend auto &operator >> (istream &i, modint &a) {return i >> a.x; }
  friend auto &operator << (ostream &o, const modint &z) { return o << z.x; }
  inline bool operator == (const modint &b) { return x == b.x; }
  inline bool operator != (const modint &b) { return x != b.x; }
  inline bool operator != (const int &b) { return x != b; }
  inline bool operator < (const modint &a) { return x < a.x; }
  inline bool operator <= (const modint &a) { return x <= a.x; }
  inline bool operator > (const modint &a) { return x > a.x; }
  inline bool operator >= (const modint &a) { return x >= a.x; }
  operator int() const {
    return x;
  }
  // inline void
};

typedef modint<MOD> mint;

inline mint ksm(mint a, int b, mint ret = 1) {
	for(; b; b >>= 1, a = a * a ) if(b & 1) ret = ret * a ;
	return ret;
}

void solve() {
  string s, t; cin >> s >> t;
  int n = s.size(), m = t.size();
  vector legal(n + 1, vector<bool>(n + 1, false));
  vector st(n + 1, vector<bool>(n + 1, false));
  s = " " + s;
  bool flag = true;

  for (int i = 1; i + m - 1 <= n; i ++ ) if (s.substr(i, m) == t) {
    for (int l = 1; l <= i; l ++ ) {
      for (int r = i + m - 1; r <= n; r ++ ) {
        legal[l][r] = true;
        flag = false;
      }
    }
    st[i][i + m - 1] = true;
  }

  vector f(n + 1, vector<mint> (n + 1, 0));

  vector vis(n + 1, vector<bool>(n + 1, false));

  f[0][0] = 1; // 1 2 3
  vis[0][0] = true;  
  for (int i = 1; i + m - 1 <= n; i ++ ) if (st[i][i + m - 1]) {
    for (int j = 0; j < i; j ++ ) {
      for (int k = 0; k < i; k ++ ) if ((!k || j + m - 1 < i) && vis[j][k] && (!legal[!k ? k + 1 : j + m][i - 1])) {
        f[i][k + 1] += f[j][k];
        vis[i][k + 1] = true;
      }
    }
  }

  int limit = 0;
  for (int i = n; i >= 1; i -- ) if (i + m - 1 <= n) {
    if (legal[i][i + m - 1]) {
      limit = i; break;
    }
  }  

  int ans1 = INT_MAX;
  mint ans2 = 0;


  for (int i = 1; i <= n; i ++ ) if (i + m > limit) {
    for (int j = 0; j <= i; j ++ ) if (vis[i][j]) {
      chkmin(ans1, j);
    }
  }

  if (ans1 == INT_MAX) {
    cout << "0 1\n";
    return ;
  }

  for (int i = 1; i <= n; i ++ ) if (i + m > limit) {
    if (vis[i][ans1]) {
      ans2 += f[i][ans1];
    }
  }

  cout << ans1 << " " << ans2 << "\n";





}

int main() {
  cin.tie(nullptr)->sync_with_stdio(false);
  int T = 1; cin >> T;
  while (T --) solve();
  return 0;
}

/*
 *
 *　　┏┓　　　┏┓+ +
 *　┏┛┻━━━┛┻┓ + +
 *　┃　　　　　　　┃
 *　┃　　　━　　　┃ ++ + + +
 *  ████━████+
 *  ◥██◤　◥██◤ +
 *　┃　　　┻　　　┃
 *　┃　　　　　　　┃ + +
 *　┗━┓　　　┏━┛
 *　　　┃　　　┃ + + + +Code is far away from 　
 *　　　┃　　　┃ + bug with the animal protecting
 *　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
 *　　　┃ 　　　　　　 ┣┓
 *　　  ┃ 　　　　　 　┏┛
 *　    ┗┓┓┏━┳┓┏┛ + + + +
 *　　　　┃┫┫　┃┫┫
 *　　　　┗┻┛　┗┻┛+ + + +
 */
