/* Generated by powerful Codeforces Tool
 * Author: nanfeng1997
 * Time: 2022-08-30 22:50:51
**/

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#ifdef LOCAL
#include <debugger>
#else
#define debug(...) 42
#endif

template <typename T> void chkmax(T &x, T y) { x = max(x, y); }
template <typename T> void chkmin(T &x, T y) { x = min(x, y); }

int dx[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

struct DSU {
  vector<int> f, siz, rank;
  int cnt; //统计还剩多少个连通块
  DSU(int n) : cnt(n), f(n), rank(n, 0), siz(n, 1) { iota(f.begin(), f.end(), 0); }
  int find(int x) {
    while (x != f[x]) x = f[x] = f[f[x]];
    return x;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int merge(int x, int y) {
    x = find(x), y = find(y);
    if (x == y) return -1;
    else -- cnt;
    if(rank[x] > rank[y]) swap(x, y);
    siz[y] += siz[x];
    f[x] = y;
    if(rank[x] == rank[y]) rank[y] ++;
    return y;
  }
  int size(int x) { return siz[find(x)]; }
}; //按秩合并 and 路径压缩 
 
void solve() {
  int n, m; cin >> n >> m;
  vector<string> a(n);
  for (auto &x: a) cin >> x;
  vector<vector<bool> > vis(n, vector<bool>(m, false));
  DSU d((n + 1) * (m + 1));

  for (int i = 0; i < n; i ++ ) {
    for (int j = 0; j < m; j ++ ) if (!vis[i][j] && a[i][j] == '*') {
      queue<pair<int, int> > q;
      vector<pair<int, int> > p;
      q.push(make_pair(i, j));
      vis[i][j] = true;
      while (!q.empty()) {
        auto t = q.front(); q.pop();
        p.push_back(t);
        auto [tx, ty] = t;
        for (int k = 0; k < 8; k ++ ) {
          auto [nx, ny] = t;
          nx += dx[k], ny += dy[k];
          if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
          if (!vis[nx][ny] && a[nx][ny] == '*') {
            q.push(make_pair(nx, ny));
            d.merge(tx * m + ty, nx * m + ny);
            if (d.size(i * m + j) > 3) {
              cout << "NO\n";
              return ;
            }
            vis[nx][ny] = true;
          }
        }
      }

      if ((int)p.size() != 3) {
        cout << "NO\n";
        return ;
      }
      
      int nx = 0, ny = 0;
      set<int> s1, s2;
      for (auto[P, Q] : p) {
        nx ^= P;
        ny ^= Q;
        s1.insert(P);
        s2.insert(Q);
      }
      s1.insert(nx);
      s2.insert(ny);
      if ((int)s1.size() != 2 || (int)s2.size() != 2 ) {
        cout << "NO\n";
        return ;
      }
    }
  }

  cout << "YES\n";

}

int main() {
  cin.tie(nullptr)->sync_with_stdio(false);
  int T = 1; cin >> T;
  while (T --) solve();
  return 0;
}

/*
 *
 *　　┏┓　　　┏┓+ +
 *　┏┛┻━━━┛┻┓ + +
 *　┃　　　　　　　┃
 *　┃　　　━　　　┃ ++ + + +
 *  ████━████+
 *  ◥██◤　◥██◤ +
 *　┃　　　┻　　　┃
 *　┃　　　　　　　┃ + +
 *　┗━┓　　　┏━┛
 *　　　┃　　　┃ + + + +Code is far away from 　
 *　　　┃　　　┃ + bug with the animal protecting
 *　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
 *　　　┃ 　　　　　　 ┣┓
 *　　  ┃ 　　　　　 　┏┛
 *　    ┗┓┓┏━┳┓┏┛ + + + +
 *　　　　┃┫┫　┃┫┫
 *　　　　┗┻┛　┗┻┛+ + + +
 */
