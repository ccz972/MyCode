/* Generated by powerful Codeforces Tool
 * Author: SmartNanfeng
 * Time: 2022-09-06 22:35:02
**/

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#ifdef LOCAL
#include <debugger>
#else
#define debug(...) 42
#endif

template <typename T> void chkmax(T &x, T y) { x = max(x, y); }
template <typename T> void chkmin(T &x, T y) { x = min(x, y); }

void solve() {
  int n; cin >> n;
  string s; cin >> s;
  vector<int> a(n << 1);
  a[0] = 1;
  for (int i = 1; i < n * 2; i ++ ) {
    a[i] = a[i - 1] + (s[i] == '(' ? 1 : -1);
  }
  int cnt = count(a.begin(), a.end(), 0);
  if (cnt == 1) {
    cout << n << "\n";
  } else {
    cout << n - cnt + 1 << "\n";
  } 
}
struct DSU {
  vector<int> f, siz, rank;
  int cnt; //统计还剩多少个连通块
  DSU(int n) : cnt(n), f(n), rank(n, 0), siz(n, 1) { iota(f.begin(), f.end(), 0); }
  int find(int x) {
    while (x != f[x]) x = f[x] = f[f[x]];
    return x;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int merge(int x, int y) {
    x = find(x), y = find(y);
    if (x == y) return -1;
    else -- cnt;
    if(rank[x] > rank[y]) swap(x, y);
    siz[y] += siz[x];
    f[x] = y;
    if(rank[x] == rank[y]) rank[y] ++;
    return y;
  }
  int size(int x) { return siz[find(x)]; }
}; //按秩合并 and 路径压缩 
 
void baoli() {
  int n; cin >> n;
  string s; cin >> s;
  DSU d(n << 1);

  auto chk = [&] (int l, int r) {
    int now = 0;
    for (int i = l; i <= r; i ++ ) {
      now += (s[i] == '(' ? 1 : -1);
      if (now < 0) return false;
    }
    return now == 0;
  };

  for (int l = 0; l < n * 2; l ++ ) if (s[l] == '(') {
    for (int r = l + 1; r < n * 2; r += 2) {
      if (chk(l, r)) {
        d.merge(l, r);
      }
    }
  }
  map<int, vector<int> > mp;
  for (int i = 0; i < n * 2; i ++ ) {
    mp[d.find(i)].push_back(i);
  }
  for (auto [k, v] : mp) {
    cout << k << ": ";
    for (auto x: v) cout << x << " ";
    cout << "\n";
  }

  cout << d.cnt << "\n";
}

int main() {
  cin.tie(nullptr)->sync_with_stdio(false);
  int T = 1; cin >> T;
  while (T --) solve();
  return 0;
}

/*
 *
 *　　┏┓　　　┏┓+ +
 *　┏┛┻━━━┛┻┓ + +
 *　┃　　　　　　　┃
 *　┃　　　━　　　┃ ++ + + +
 *  ████━████+
 *  ◥██◤　◥██◤ +
 *　┃　　　┻　　　┃
 *　┃　　　　　　　┃ + +
 *　┗━┓　　　┏━┛
 *　　　┃　　　┃ + + + +Code is far away from 　
 *　　　┃　　　┃ + bug with the animal protecting
 *　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
 *　　　┃ 　　　　　　 ┣┓
 *　　  ┃ 　　　　　 　┏┛
 *　    ┗┓┓┏━┳┓┏┛ + + + +
 *　　　　┃┫┫　┃┫┫
 *　　　　┗┻┛　┗┻┛+ + + +
 */
